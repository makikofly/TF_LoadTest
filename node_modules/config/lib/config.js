"use strict";
var path = require('path');

/**
 * This module exists for backwards compatibility with our previous 'do-everything' port of 
 * the (awful) node module: https://github.com/lorenwest/node-config
 *
 * If we want to use al alternate config it can be done like this:
 * 
 * @example
 * require('../../util/config').loadConfig(path.resolve(__dirname+'/../../generators/templates/defaultProject/config'));
 */

// We can only assign module.exports once so let's do that and keep a ref to it so we
// can manipulate it later.
var configExports = {};
module.exports = configExports;

/**
 * Clear an object completely.
 */
function removeAll(someObj) {
    for(var currKey in someObj) {
        delete someObj[currKey];
    }
}

/**
 * In case we ever need to reload our configuration from an alternate directory, we
 * can use this method.  There are a few hacks here to make this work but we have 
 * little choice or we'll break existing code.
 */
exports.loadConfig = function(pathToConfigFiles, appEnv) {

    if (pathToConfigFiles === undefined)
        pathToConfigFiles = path.resolve(process.cwd(), 'config');

    if (appEnv === undefined)
        appEnv = process.env.NODE_ENV || 'development';

    var configDir = path.resolve(pathToConfigFiles);    // need to qualify the path to load it
    var ConfigLoader = require('./ConfigLoader').ConfigLoader;
    var loader = new ConfigLoader(configDir, appEnv);
    var configResult = loader.loadFileConfigs();

    removeAll(configExports);
    for (var currKey in configResult) {
        configExports[currKey] = configResult[currKey];
    }

    // Make sure to put the 'loadConfig' function back.
    configExports['loadConfig'] = exports.loadConfig;
}

// On the first 'require' do the usual thing.
exports.loadConfig();
