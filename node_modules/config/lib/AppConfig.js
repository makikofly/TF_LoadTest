"use strict";
var util = require('util');

/**
 * A wrapper object providing a simple read-only API
 * for a configuration object.
 *
 * @param configObj {object} The configuration object that contains all of the data that
 * will be exposed by this instance of AppConfig.
 * @param region {string} An optional indicator for the current region (e.g. 'US','JP').
 */
function AppConfig(configObj, region) {

    if ((typeof configObj !== 'object') || null === configObj || Array.isArray(configObj)) {
        throw new Error('configObj is not a valid object');
    }
    this.configObj = configObj;
    this.region = region;
}

/**
 * Return the value associated with the specified property. If no such property is
 * found, the provided defaultValue will be returned or undefined if no defaultValue
 * was provided.
 *
 * @param propertyName {string} The name of the property to look for. May include '.' characters 
 * indicating an object traversal (e.g. 'parent.child.age', 'parent').
 * @param defaultValue {string} A default value to use in case no property having propertyName
 * was found.
 */
AppConfig.prototype.get = function(propertyName, defaultValue) {

    if (propertyName === undefined && defaultValue === undefined)
        return this.configObj; 

    if ('string' !== typeof propertyName)
        return defaultValue || null;

    var properties = propertyName.split('.');
    var currVal = this.configObj;

    for (var i=0; i<properties.length; i++) {
        var currPropertyName = properties[i];
        if (!currVal.hasOwnProperty(currPropertyName))
            return defaultValue;
        currVal = currVal[currPropertyName];
    }

    var isValid = 'undefined'!==typeof currVal&&null!==currVal;
    return isValid ? currVal : defaultValue;
};

/**
 * Return the value for the region, if defined.
 * @returns {string|boolean} A string with the region or, if not defined, false.
 */
AppConfig.prototype.getRegion = function() {
    return this.get('region', false);
}

/**
 * Return the region-specific value associated with the specified property. If no such property is
 * found, the provided defaultValue will be returned or undefined if no defaultValue
 * was provided.  The region should be provided in the constructor to this object.
 *
 * If no region was specified when this object was created, the defaultValue will be returned.
 *
 * @param propertyName {string} The name of the property to look for. May include '.' characters 
 * indicating an object traversal (e.g. 'parent.child.age', 'parent').
 * @param defaultValue {string} A default value to use in case no property having propertyName
 * was found.
 */
AppConfig.prototype.getRegionalized = function(propertyName, defaultValue) {
    
    if (this.region == undefined || propertyName == undefined)
        return defaultValue;
    
    propertyName = this.region + '.' + propertyName;
    return this.get(propertyName, defaultValue);
};

exports.AppConfig = AppConfig;
