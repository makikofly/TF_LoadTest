/**
 * @fileoverview A set of tests for the FileUtils object.
 * the tests will all execute and, if there are no errors, the process exits with 0,
 * the exit value is 1 otherwise.
 *
 * @author <a href="mailto:edmond@ngmoco.com">Edmond Meinfelder</a>
 */

"use strict";
var async = require('async');
var util = require('util');
var assert = require('assert');
var path = require('path');
var config = require('../lib/config');
var ConfigLoader = require('../lib/ConfigLoader').ConfigLoader;
config.loadConfig('./test/config');

////////////////////////////////////////////////////////////////////////////////

var testConstructor = function(cb) {

    var JsUtils = require('JsUtils').JsUtils;
    var ConfigLoader = require('../lib/ConfigLoader').ConfigLoader;

    // Both constructor args should be strings.
    JsUtils.nonStrings().forEach(function(currNonStr) {
        assert.throws(function() {
            new ConfigLoader(currNonStr,'development');
        });

        try {
            assert.throws(function() {
                new ConfigLoader('/tmp','development');
            });
            cb('Error: failed to throw on invalid config dir.');
        } catch(err) {
        }
    });

    // Bad config directory.
    try {
        assert.throws(function() {
            new ConfigLoader('/i/dont/exist','development');
        });
        cb('Error: failed to throw on invalid path');
    } catch(err) {
    }

    cb();
};

var testConfigRegion = function(cb) {
    assert.ok(config !== undefined);
    var region = config.get('region');
    assert.ok(region == "US" || region == "JP");
    cb();
};

var testConfigDefaults = function(cb) {
    var bankHostName = config.getRegionalized('mobage.bankHostName');
    assert.ok(bankHostName == 'bank-sandbox.mobage.com');
    cb();
};

////////////////////////////////////////////////////////////////////////////////


var AppConfig = require('../lib/AppConfig').AppConfig;

var testImmutable = function(cb) {

    var configObj = {
        fooNumber : 1,
        fooObj : {
            barNumber : 2,
            barObj : {
                bazNumber : 3,
            }
        }
    };

    ConfigLoader.prototype.makeObjImmutable(configObj);
    assert.throws(function() {configObj.fooNumber = 'The number 1'}, 'TypeError');
    assert.throws(function() {configObj.fooObj.barNumber = 'The number 2'}, 'TypeError');
    assert.throws(function() {configObj.fooObj.barObj.bazNumber = 'The number 3'}, 'TypeError');

    cb();
};

var testSimple = function(cb) {

    var configObj = {

        fooNumber : 1,
        fooString : 'One',
        fooObj : {
            barNumber : 2,
            barString : 'Two',
            barObj : {
                bazNumber : 3,
                bazString : 'Three',
                bazObj : { boo : 'boo' }
            }
        }
    };

    var appConfig = new AppConfig(configObj);
    assert.equal(appConfig.get('fooNumber'),1);
    assert.equal(appConfig.get('fooString'),'One');
    assert.equal(appConfig.get('fooObj.barNumber'),2);
    assert.equal(appConfig.get('fooObj.barString'),'Two');
    assert.equal(appConfig.get('fooObj.barObj.bazNumber'),3);
    assert.equal(appConfig.get('fooObj.barObj.bazString'),'Three');
    assert.equal(appConfig.get('fooObj.barObj.bazObj.boo'),'boo');

    cb();
};

var testOverride = function(cb) {

    var configDir = path.join(__dirname, 'config');
    var CLobj = new ConfigLoader(configDir, 'development');
    var config = CLobj.loadFileConfigs();
    if (config.get('foo') !== 'baz') {
        cb('config override failed, foo value is: '+util.inspect(config.get('foo')));
        return;
    }

    cb();
};

var testGetRegionalized = function(cb) {

    var configObj = {

        JP : {
            host : 'server.dena.jp'
        },
        US : {
            host : 'server.ngmoco.com'
        }
    };

    var appConfig = new AppConfig(configObj,'US');
    assert.equal(appConfig.getRegionalized('host'),'server.ngmoco.com');

    appConfig = new AppConfig(configObj,'JP');
    assert.equal(appConfig.getRegionalized('host'),'server.dena.jp');

    cb();
};

var testDefaultVal = function(cb) {

    var configObj = {
        someKey : 'someVal'
    };

    var appConfig = new AppConfig(configObj);

    assert.equal(appConfig.get('doesNotExist'),undefined);
    assert.equal(appConfig.get('doesNotExist','mydefault'),'mydefault');

    cb();
};

////////////////////////////////////////////////////////////////////////////////


/**
 * Executes the testssequentially and handles the exit value.
 */
function do_tests() {
    async.series(
        [
            testSimple,
            testOverride,
            testImmutable,
            testGetRegionalized,
            testDefaultVal,
            testConstructor,
            testConfigRegion,
            testConfigDefaults
        ],

        // async callback
        function(err, results) {
            if (err)  {
                console.error('Error: '+err);
                process.exit(1);
                return;
            }
            console.log('All tests passed.');
            process.exit(0);
        }
    );
}

do_tests();     // Causes all the tests to run.
